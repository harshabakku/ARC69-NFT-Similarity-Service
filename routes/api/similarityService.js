require('log-timestamp');
const express = require('express');
const router = express.Router();
const client = require('../../elasticsearch/connection');



router.get('/similarNFTs', async function (req, res) {
    
   
    //======= Check that Elasticsearch is up and running =======\\ //only works for Elastic Cloud cluster
    pingElasticsearch = async () => {
        await client.ping(
            function(error,res) {
                if (error) {
                    console.error('elasticsearch cluster is down!');
                } else {
                    console.log('Elasticsearch Ready');
                }
            }
        );
    }

    similarNFTs = async () => {
        try {
            

            console.log('Getting Similar NFTs from es query results')

                        
            console.log( '\n\n\n\n\n',' secs........... ');

            const assetNFT = await client.get({
                index: 'algoseaspirate', //replace with indexName/CollectionName 
                id: '20393'
              })


            console.log('Generating elastisearch queries to return similar Assets')  
            
         
            //build should query (OR query) to match various asset props here.
            //elasticsearch computes the score according depending the no. of matches automatically.

            //bring this into .env /constants file later on
            //can also be autogenerated from http://172.18.0.2:9200/algoseaspirate/_mapping    http://eshost/index/mapping basically
            assetTextFields = [ "Back Hand",  "Back Item",  "Background",  "Background Accent",  "Body",  "Face",  "Facial Hair",  "Footwear",  "Front Hand",  "Hat",  "Head",  "Hip Item",  "Left Arm",  "Necklace",  "Overcoat",  "Pants",  "Pet",  "Right Arm",  "Scenery",  "Shirt",  "Shirts",  "Tattoo"  ];


            const shouldQueries = [];
            assetTextFields.forEach(function(property) 
            {
                 shouldQueries.push({ "match": { [property] :  assetNFT._source[property] }});                
            });

            const query = {
                //we can controls the no. of results from es with size here...
                    "size" : 100, 
                    "query": {
                        "bool": { 
                            "should": shouldQueries
                            }
                        }                  
                    }

            console.log(JSON.stringify(query));                    

            const result = await client.search({
                                index: assetNFT._index,     
                                body: query
                            })
            
            const response = {  assetNFT : assetNFT._source,
                                similarNFTs : result.hits.hits
                             }
            
            res.json(response);            
            
        } catch (err) {
            console.log(err)
        };
        
    }
    
    pingElasticsearch()
    similarNFTs()     

});
 
module.exports = router;